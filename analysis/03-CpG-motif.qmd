---
title: "CpG Motif Analysis"
author: "Paolo Cozzi"
date: today
toc: true
number-sections: true
cache: false
format:
  html:
    code-line-numbers: true
    html-math-method: katex
    df-print: paged
    code-fold: true
    toc-depth: 5
    embed-resources: true  # Embed all resources directly into the HTML file
editor: source
---

```{r setup, output=FALSE}
library(here)
library(targets)
library(bsseq)
library(ggplot2)

# where I can find artifacts
store_path <- here::here("_targets")
```

This is an attempt to analyze the CpG methylation data using the modkit `traditional`
preset (searchonly for methylated on CpG motifs) and using the modkit `--cpg` option
(search both methylation and hydroxymethylation on CpG motifs). Data comes after
calling the ont `wf-basecalling` workflow using `5mC-5hmC` and `5mCG-5hmCG`
models and after by running `nf-core/methylseq` pipeline by customizing the
`MODKIT_PILEUP` nextflow step. All the data is stored in the `_targets` folder
and can be accessed using the `targets` package.

## Describing data

### Raw output

Let's read the bedMethyl output and do some basic statistics: data are read directly
from the *bedMethyl* files, and then filtered against the *CpG buffer* regions,
the same track used when performing the *adaptive sampling* on ONT instrument.
Let's open the `5mC-5hmC` model with `--preset traditional` first, we are focusing
on `valid_coverage` and `percent_modified` columns:

```{r summary-5mC}
tar_load(summary_coverage_data_5mC, store = store_path)
summary_coverage_data_5mC
```

Here's a summary of `5mCG-5hmCG` model with `--preset traditional` as before:

```{r load-data-5mCG}
tar_load(summary_coverage_data_5mCG, store = store_path)
summary_coverage_data_5mCG
```

Last summary is again on model `5mCG-5hmCG` but with `--cpg` option (call both
methylation and hydroxymethylation on CpG motifs):

```{r load-data-5mCG-5hmCG}
tar_load(summary_coverage_data_5mCG_5hmCG, store = store_path)
summary_coverage_data_5mCG_5hmCG
```

There's a drop in the `valid_coverage` and `percent_modified` for the `5mCG-5hmCG` model with `--cpg`, while the `traditional` preset on `5mCG-5hmCG` seems to be better than `5mC-5hmCG` model. However, we need to consider that the `5mCG-5hmCG` model with `--cpg`
has more than *270M* of data, while the other two models have around *70M* of data each.
Let's plot the distribution of `valid_coverage` accross all samples for the three
models respectively:

::: {.callout-warning}
Note: I've subsampled this data to 100000 points for each sample for the sake of speed.
:::

```{r plot-valid-coverage}
tar_load(plot_valid_coverage, store = store_path)
plot_valid_coverage
```

Plot the distribution of `percent_modified` methylation:

```{r plot-percent-modified}
tar_load(plot_percent_modified, store = store_path)
plot_percent_modified
```

### Filter by 5X valid coverage

Let's filter the data to keep only regions with at least *5X valid coverage* and
do the same statistics as before. Here's the summary for `5mC-5hmC` model:

```{r summary-5mC-5x}
tar_load(summary_coverage_data_5mC_5x, store = store_path)
summary_coverage_data_5mC_5x
```

The same for `5mCG-5hmCG` model with `--preset traditional` as before:

```{r load-data-5mCG-5x}
tar_load(summary_coverage_data_5mCG_5x, store = store_path)
summary_coverage_data_5mCG_5x
```

Last summary is again on model `5mCG-5hmCG` but with `--cpg` option (call both
methylation and hydroxymethylation on CpG motifs):

```{r load-data-5mCG-5hmCG-5x}
tar_load(summary_coverage_data_5mCG_5hmCG_5x, store = store_path)
summary_coverage_data_5mCG_5hmCG_5x
```

This type of filter has moved *median* and *mean* values, but again the `traditional`
preset on `5mCG-5hmCG` seems to be better than the other models. However, the number
of data points in the `5mCG-5hmCG` model with `--cpg` is more than two times the other two models. Let's plot the distribution of `valid_coverage` accross all samples for the three models respectively:

::: {.callout-warning}
Note: I've subsampled this data to 100000 points for each sample for the sake of speed.
:::

```{r plot-valid-coverage-5x}
tar_load(plot_valid_coverage_5x, store = store_path)
plot_valid_coverage_5x
```

Plot the distribution of `percent_modified` methylation:

```{r plot-percent-modified-5x}
tar_load(plot_percent_modified_5x, store = store_path)
plot_percent_modified_5x
```

After filtering, the `valid_coverage` seems to be improved, while the `percent_modified`
is not so much different from the previous one.

## Search for DMRs (5mC model)

This section is about searching for differentially methylated regions (DMRs)
using the `bsseq` package. Data has been loaded and filtered to select regions
with at least *5X valid coverage` in at least two samples. Let's print the
`bsseq` object:

```{r print-bsseq-5mC}
tar_load(BS.5mC.ex.fit, store = store_path)
BS.5mC.ex.fit
```

Plot the distribution of *t-statistic*:

```{r plot-t-statistic-5mC}
tar_load(BS.5mC.tstat, store = store_path)
plot(BS.5mC.tstat)
```

Let's take the top 5 DMRs regions:

```{r top-dmrs-5mC}
tar_load(dmrs.5mC, store = store_path)
head(dmrs.5mC, 5)
```

There are `{r} nrow(dmrs.5mC)` DMRs in total, ranked by `areaStat`, which represents
the sum of t-statistics for each CpG site. This value reflects the DMR area,
weighted by the number of CpGs rather than the genomic length.

Create a plot with the best DMR:

```{r plot-top-dmr-5mC}
tar_load(BS.5mC.fit, store = store_path)
tar_load(geneTrack, store = store_path)

metadata <- pData(BS.5mC.fit)
metadata$col <- ifelse(metadata$breed == "Angus", "red", "blue")
pData(BS.5mC.fit) <- metadata
plotRegion(
  BS.5mC.fit,
  dmrs.5mC[1, ],
  extend = 5000,
  addRegions = dmrs.5mC,
  geneTrack = geneTrack
)
```

Plot the other 4 top DMRs:

```{r plot-top-5-dmrs-5mC}
for (i in 2:5) {
  plotRegion(
    BS.5mC.fit,
    dmrs.5mC[i, ],
    extend = 5000,
    addRegions = dmrs.5mC,
    geneTrack = geneTrack
  )
}
```

## Search for DMRs (5mCG model)

This is the same af the section above, but using the `5mCG-5hmCG` model
with `--preset traditional`. Let's load and print the `bsseq` object:

```{r print-bsseq-5mCG}
tar_load(BS.5mCG.ex.fit, store = store_path)
BS.5mCG.ex.fit
```

Plot the distribution of *t-statistic*:

```{r plot-t-statistic-5mCG}
tar_load(BS.5mCG.tstat, store = store_path)
plot(BS.5mCG.tstat)
```

Let's take the top 5 DMRs regions:

```{r top-dmrs-5mCG}
tar_load(dmrs.5mCG, store = store_path)
head(dmrs.5mCG, 5)
```

There are `{r} nrow(dmrs.5mCG)` DMRs in total, ranked by `areaStat`, which represents
the sum of t-statistics for each CpG site. This value reflects the DMR area,
weighted by the number of CpGs rather than the genomic length.

Create a plot with the best DMR:

```{r plot-top-dmr-5mCG}
tar_load(BS.5mCG.fit, store = store_path)
tar_load(geneTrack, store = store_path)

metadata <- pData(BS.5mCG.fit)
metadata$col <- ifelse(metadata$breed == "Angus", "red", "blue")
pData(BS.5mCG.fit) <- metadata
plotRegion(
  BS.5mCG.fit,
  dmrs.5mCG[1, ],
  extend = 5000,
  addRegions = dmrs.5mCG,
  geneTrack = geneTrack
)
```

Plot the other 4 top DMRs:

```{r plot-top-5-dmrs-5mCG}
for (i in 2:5) {
  plotRegion(
    BS.5mCG.fit,
    dmrs.5mCG[i, ],
    extend = 5000,
    addRegions = dmrs.5mCG,
    geneTrack = geneTrack
  )
}
```

## Search for DMRs (5mCG-5hmCG model)

This is the same af the section above, but using the `5mCG-5hmCG` model with `--cpg`
option. Let's load and print the `bsseq` object:

```{r print-bsseq-5mCG-5hmCG}
tar_load(BS.5mCG_5hmCG.ex.fit, store = store_path)
BS.5mCG_5hmCG.ex.fit
```

Plot the distribution of *t-statistic*:

```{r plot-t-statistic-5mCG-5hmCG}
tar_load(BS.5mCG_5hmCG.tstat, store = store_path)
plot(BS.5mCG_5hmCG.tstat)
```

Let's take the top 5 DMRs regions:

```{r top-dmrs-5mCG-5hmCG}
tar_load(dmrs.5mCG_5hmCG, store = store_path)
head(dmrs.5mCG_5hmCG, 5)
```

There are `{r} nrow(dmrs.5mCG_5hmCG)` DMRs in total, ranked by `areaStat`, which represents
the sum of t-statistics for each CpG site. This value reflects the DMR area,
weighted by the number of CpGs rather than the genomic length.

Create a plot with the best DMR:

```{r plot-top-dmr-5mCG-5hmCG}
tar_load(BS.5mCG_5hmCG.fit, store = store_path)
tar_load(geneTrack, store = store_path)

metadata <- pData(BS.5mCG_5hmCG.fit)
metadata$col <- ifelse(metadata$breed == "Angus", "red", "blue")
pData(BS.5mCG_5hmCG.fit) <- metadata
plotRegion(
  BS.5mCG_5hmCG.fit,
  dmrs.5mCG_5hmCG[1, ],
  extend = 5000,
  addRegions = dmrs.5mCG_5hmCG,
  geneTrack = geneTrack
)
```

Plot the other 4 top DMRs:

```{r plot-top-5-dmrs-5mCG-5hmCG}
for (i in 2:5) {
  plotRegion(
    BS.5mCG_5hmCG.fit,
    dmrs.5mCG_5hmCG[i, ],
    extend = 5000,
    addRegions = dmrs.5mCG_5hmCG,
    geneTrack = geneTrack
  )
}
```
